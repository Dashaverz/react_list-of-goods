{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","isReversed","sortType","NONE","sortBy","setState","reverse","reset","this","visibleGoods","goods","sort","a","b","ALPHABET","localeCompare","LENGTH","length","console","log","getReorderedGoods","className","type","classNames","onClick","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,wGAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAuDE,IAAME,EAAb,4MACEC,MAAQ,CACNC,YAAY,EACZC,SAAUL,EAASM,MAHvB,EAMEC,OAAS,SAACF,GACR,EAAKG,SAAS,CACZH,cARN,EAYEI,QAAU,WACR,EAAKD,UAAS,SAACL,GAAD,MAAY,CACxBC,YAAaD,EAAMC,gBAdzB,EAkBEM,MAAQ,WACN,EAAKF,SAAS,CACZJ,YAAY,EACZC,SAAUL,EAASM,QArBzB,4CAyBE,WAAU,IAAD,OACP,EAAiCK,KAAKR,MAA9BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,SACdO,EAtEH,SACLC,EADK,GAGJ,IADCR,EACF,EADEA,SAAUD,EACZ,EADYA,WAGNQ,EAAY,YAAOC,GAiBzB,OAbAD,EAAaE,MAAK,SAACC,EAAGC,GACpB,OAAQX,GACN,KAAKL,EAASiB,SACZ,OAAOF,EAAEG,cAAcF,GAEzB,KAAKhB,EAASmB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OAEtB,QACE,OAAO,MAIThB,EACKQ,EAAaH,WAItBY,QAAQC,IAAIjB,EAAUD,GAEfQ,GAyCgBW,CAAkBtB,EAAiBU,KAAKR,OAE7D,OACE,sBAAKqB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBAAkB,CACtC,WAAYrB,IAAaL,EAASiB,WAEpCU,QAAS,kBAAM,EAAKpB,OAAOP,EAASiB,WALtC,iCAUA,wBACEQ,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,WAAYrB,IAAaL,EAASmB,SAEpCQ,QAAS,kBAAM,EAAKpB,OAAOP,EAASmB,SALtC,4BAUA,wBACEM,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,YAAatB,IAEfuB,QAAShB,KAAKF,QALhB,sBAUEJ,GAAYD,IACZ,wBACEqB,KAAK,SACLD,UAAU,4BACVG,QAAShB,KAAKD,MAHhB,sBAUJ,6BACGE,EAAagB,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,eA3EpC,GAAyBC,IAAMC,WCtE/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9296dd69.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n\n  visibleGoods.sort((a, b) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return a.localeCompare(b);\n\n      case SortType.LENGTH:\n        return a.length - b.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    return visibleGoods.reverse();\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\n// type State = {\n//   isReversed: boolean,\n//   sortType: SortType,\n// };\n\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  sortBy = (sortType: SortType) => {\n    this.setState({\n      sortType,\n    });\n  };\n\n  reverse = () => {\n    this.setState((state) => ({\n      isReversed: !state.isReversed,\n    }));\n  };\n\n  reset = () => {\n    this.setState({\n      isReversed: false,\n      sortType: SortType.NONE,\n    });\n  };\n\n  render() {\n    const { isReversed, sortType } = this.state;\n    const visibleGoods = getReorderedGoods(goodsFromServer, this.state);\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={classNames('button is-info', {\n              'is-light': sortType !== SortType.ALPHABET,\n            })}\n            onClick={() => this.sortBy(SortType.ALPHABET)}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames('button is-success', {\n              'is-light': sortType !== SortType.LENGTH,\n            })}\n            onClick={() => this.sortBy(SortType.LENGTH)}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames('button is-warning', {\n              'is-light': !isReversed,\n            })}\n            onClick={this.reverse}\n          >\n            Reverse\n          </button>\n\n          {(sortType || isReversed) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={this.reset}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <ul>\n          {visibleGoods.map((good) => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}